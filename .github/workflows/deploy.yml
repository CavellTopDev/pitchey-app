name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x
      
      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/pitchey
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          PORT: 8001
          DENO_ENV: test
          NODE_ENV: test
        run: |
          nohup deno run --allow-net --allow-env --allow-read working-server.ts > server.log 2>&1 & echo $! > server.pid
          for i in {1..60}; do
            if curl -sSf http://localhost:8001/api/health > /dev/null; then echo "Server is up"; break; fi; sleep 1; done
          test -f server.pid || (echo "Server failed to start" && tail -n +1 server.log && exit 1)
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/pitchey
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: deno task test
      
      - name: Stop backend server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi
          pkill -f "deno.*working-server" || true
          tail -n 200 server.log || true
      
      # Skip formatting and linting for now
      # - name: Check formatting
      #   run: deno fmt --check
      
      # - name: Run linter
      #   run: deno lint

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x
      
      - name: Temporarily move .env.example
        run: mv .env.example .env.example.backup || true
      
      - name: Install deployctl
        run: deno install -A --global jsr:@deno/deployctl@1.x
        
      - name: Deploy to Deno Deploy
        env:
          DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          deployctl deploy \
            --project="pitchey-backend-fresh" \
            --entrypoint="working-server.ts" \
            --token="$DENO_DEPLOY_TOKEN" \
            --env="DATABASE_URL=$DATABASE_URL" \
            --env="JWT_SECRET=$JWT_SECRET" \
            --env="FRONTEND_URL=https://pitchey.netlify.app" \
            --env="UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}" \
            --env="UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}" \
            --env="CACHE_ENABLED=true" \
            --env="PORT=8000" \
            --env="NODE_ENV=production" \
            --env="DENO_ENV=production"
      
      - name: Restore .env.example
        if: always()
        run: mv .env.example.backup .env.example || true

  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_URL: https://pitchey-backend-fresh.deno.dev
          NODE_ENV: production
        run: npm run build
      
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './frontend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10