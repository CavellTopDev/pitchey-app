# Docker Compose for Redis Cluster Testing
# This is for development/testing only - not for production use
version: '3.8'

services:
  redis-node-1:
    image: redis:7-alpine
    container_name: redis-cluster-node-1
    ports:
      - "7001:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-node-1-data:/data
    networks:
      - redis-cluster

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-cluster-node-2
    ports:
      - "7002:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-node-2-data:/data
    networks:
      - redis-cluster

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-cluster-node-3
    ports:
      - "7003:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-node-3-data:/data
    networks:
      - redis-cluster

  redis-cluster-setup:
    image: redis:7-alpine
    container_name: redis-cluster-setup
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    command: |
      sh -c "
        sleep 10 &&
        redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 --cluster-replicas 0 --cluster-yes
      "
    networks:
      - redis-cluster

volumes:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:

networks:
  redis-cluster:
    driver: bridge

# Usage Instructions:
# 1. Start the cluster: docker-compose -f redis-cluster-docker-compose.yml up -d
# 2. Wait for cluster setup to complete (check logs)
# 3. Set environment variables:
#    REDIS_CLUSTER_ENABLED=true
#    REDIS_CLUSTER_NODES=localhost:7001,localhost:7002,localhost:7003
# 4. Test cluster: redis-cli -c -p 7001
# 5. Stop cluster: docker-compose -f redis-cluster-docker-compose.yml down